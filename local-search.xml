<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>C++随记</title>
    <link href="/2023/09/18/C-%E9%9A%8F%E8%AE%B0/"/>
    <url>/2023/09/18/C-%E9%9A%8F%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="字面值类型"><a href="#字面值类型" class="headerlink" title="字面值类型"></a>字面值类型</h2><p>在C++中，字面值类型（Literal Types）是一种特殊的类型，它们具有以下特征：</p><ol><li><p><strong>常量初始化</strong>：字面值类型的对象必须使用常量表达式进行初始化，这意味着它们只能通过常量值来初始化，不能通过运行时计算的值来初始化。这确保了它们的值在编译时就能确定。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> num1 = <span class="hljs-number">42</span>;  <span class="hljs-comment">// 合法的字面值类型，编译时确定</span><br><span class="hljs-type">int</span> num2 = <span class="hljs-number">42</span>;  <span class="hljs-comment">// 非字面值类型，可以在运行时初始化</span><br></code></pre></td></tr></table></figure></li><li><p><strong>可在编译时计算</strong>：字面值类型的对象的值可以在编译时完全计算，而不需要在运行时进行计算。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">square</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> x * x; <span class="hljs-comment">// 在编译时计算</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> result = <span class="hljs-built_in">square</span>(<span class="hljs-number">5</span>); <span class="hljs-comment">// 合法的constexpr上下文</span><br>    <span class="hljs-type">int</span> runtimeResult = <span class="hljs-built_in">square</span>(<span class="hljs-number">5</span>);   <span class="hljs-comment">// 编译时计算，但在运行时初始化</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>没有非静态成员</strong>：字面值类型不能有非静态成员变量，它们只能包含静态成员变量或者常量表达式静态成员变量。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LiteralType</span> &#123;<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> staticVar;          <span class="hljs-comment">// 静态成员变量是允许的</span><br>    <span class="hljs-type">static</span> <span class="hljs-type">const</span> <span class="hljs-type">int</span> constVar = <span class="hljs-number">5</span>; <span class="hljs-comment">// 常量表达式静态成员变量也是允许的</span><br>    <span class="hljs-type">int</span> nonStaticVar;             <span class="hljs-comment">// 非静态成员变量是不允许的</span><br>&#125;;<br></code></pre></td></tr></table></figure></li><li><p><strong>不能有用户自定义的构造函数</strong>：字面值类型不能有用户自定义的构造函数，它们只能使用默认构造函数或者在声明时直接初始化。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LiteralType</span> &#123;<br>    <span class="hljs-type">int</span> value;<br>    <span class="hljs-comment">// 自定义构造函数，这个类型将不再是字面值类型</span><br>    <span class="hljs-built_in">LiteralType</span>(<span class="hljs-type">int</span> val) : <span class="hljs-built_in">value</span>(val) &#123;&#125; <span class="hljs-comment">// 错误，不允许</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    LiteralType obj = &#123;<span class="hljs-number">42</span>&#125;; <span class="hljs-comment">// 直接初始化是合法的</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p><strong>在constexpr上下文中使用</strong>：字面值类型的对象可以用于<code>constexpr</code>上下文，这允许在编译时进行常量表达式计算。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 复杂字面值类型 Point</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Point</span> &#123;<br>    <span class="hljs-type">int</span> x;<br>    <span class="hljs-type">int</span> y;<br><br>    <span class="hljs-comment">// constexpr构造函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-title">Point</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> : x(a), y(b) &#123;</span>&#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">constexpr</span> Point origin = <span class="hljs-built_in">Point</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">// 使用复杂字面值类型初始化</span><br>    <span class="hljs-keyword">constexpr</span> Point p1 = <span class="hljs-built_in">Point</span>(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>);    <span class="hljs-comment">// 使用复杂字面值类型初始化</span><br>    <span class="hljs-keyword">constexpr</span> Point p2 = <span class="hljs-built_in">Point</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);    <span class="hljs-comment">// 使用复杂字面值类型初始化</span><br><br>    <span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> distance = (p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y);<br>    <span class="hljs-comment">// 在编译时计算distance，不需要在运行时进行计算</span><br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li></ol><p>以下是一些常见的C++字面值类型的示例：</p><ul><li>整数类型：包括<code>int</code>、<code>unsigned int</code>、<code>long</code>、<code>unsigned long</code>等，以及它们的各种变种。</li><li>浮点数类型：包括<code>float</code>、<code>double</code>、<code>long double</code>等。</li><li>字符类型：包括<code>char</code>、<code>wchar_t</code>、<code>char16_t</code>、<code>char32_t</code>等。</li><li>指针类型：指向字面值类型的指针也可以是字面值类型。</li></ul><p>字面值类型在C++11标准中引入，并在C++17中进行了一些扩展。字面值类型的引入有助于编译器进行更多的优化，同时也使得编写更安全和可靠的代码更容易，因为它们在编译时提供了更多的信息和检查。</p><h2 id="constexpr-C-11"><a href="#constexpr-C-11" class="headerlink" title="constexpr C++11"></a><code>constexpr</code> <code>C++11</code></h2><ul><li><strong>对象</strong>：<code>constexpr</code> &#x3D; <strong>编译</strong>期可知的<code>const</code></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">int</span> sz;                             <span class="hljs-comment">//non-constexpr变量</span><br>…<br><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">auto</span> arraySize1 = sz;     <span class="hljs-comment">//错误！sz的值在</span><br>                                    <span class="hljs-comment">//编译期不可知</span><br>std::array&lt;<span class="hljs-type">int</span>, sz&gt; data1;          <span class="hljs-comment">//错误！一样的问题</span><br><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">auto</span> arraySize2 = <span class="hljs-number">10</span>;     <span class="hljs-comment">//没问题，10是</span><br>                                    <span class="hljs-comment">//编译期可知常量</span><br>std::array&lt;<span class="hljs-type">int</span>, arraySize2&gt; data2;  <span class="hljs-comment">//没问题, arraySize2是constexpr</span><br><br><span class="hljs-type">int</span> sz;                             <span class="hljs-comment">//和之前一样</span><br>…<br><span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> arraySize = sz;          <span class="hljs-comment">//没问题，arraySize是sz的const复制</span><br>std::array&lt;<span class="hljs-type">int</span>, arraySize&gt; data;    <span class="hljs-comment">//错误，arraySize值在编译期不可知</span><br></code></pre></td></tr></table></figure><ul><li><strong>函数</strong>：编译 or 运行，取决于传入的<strong>实参</strong></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 如果base和exp是编译器常量，则pow的返回值可以被当做编译器常量使用</span><br><span class="hljs-comment">// 否则，pow的返回值将在运行时计算</span><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">pow</span><span class="hljs-params">(<span class="hljs-type">int</span> base, <span class="hljs-type">int</span> exp)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>    <span class="hljs-comment">// 省略实现: base^exp</span><br>&#125;<br><br><span class="hljs-comment">// condition I: 3和numConds都是编译器可知的</span><br><span class="hljs-keyword">constexpr</span> <span class="hljs-keyword">auto</span> numConds = <span class="hljs-number">5</span>;<br>std::array&lt;<span class="hljs-type">int</span>, pow(3, numConds)&gt; results;<br><br><span class="hljs-comment">// condition II: 运行时获取参数</span><br><span class="hljs-keyword">auto</span> base = <span class="hljs-built_in">readFromDB</span>(<span class="hljs-string">&quot;base&quot;</span>);<br><span class="hljs-keyword">auto</span> exp = <span class="hljs-built_in">readFromDB</span>(<span class="hljs-string">&quot;exp&quot;</span>);<br><span class="hljs-keyword">auto</span> base2Exp = <span class="hljs-built_in">pow</span>(base, exp);<br></code></pre></td></tr></table></figure><p>C++11中<code>constexpr</code>函数不能超过一行：1.使用三元运算符代替<code>if-else</code>；2.使用递归代替循环。</p><p>C++14则没有这个限制。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// C++11</span><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">pow</span><span class="hljs-params">(<span class="hljs-type">int</span> base, <span class="hljs-type">int</span> exp)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (exp == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : base * <span class="hljs-built_in">pow</span>(base, exp - <span class="hljs-number">1</span>));<br>&#125;<br><br><span class="hljs-comment">// C++14</span><br><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">pow</span><span class="hljs-params">(<span class="hljs-type">int</span> base, <span class="hljs-type">int</span> exp)</span> <span class="hljs-keyword">noexcept</span> </span>&#123;<br>    <span class="hljs-keyword">auto</span> result = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; exp; ++i) &#123;<br>        result *= base;<br>    &#125;<br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><p>进阶使用见<a href="https://cntransgroup.github.io/EffectiveModernCppChinese/3.MovingToModernCpp/item15.html#%E6%9D%A1%E6%AC%BE%E5%8D%81%E4%BA%94%E5%B0%BD%E5%8F%AF%E8%83%BD%E7%9A%84%E4%BD%BF%E7%94%A8constexpr">尽可能的使用<code>constexpr</code></a></p><h2 id="owning-non-owning"><a href="#owning-non-owning" class="headerlink" title="owning &amp; non-owning"></a>owning &amp; non-owning</h2><p>An object is said to be an owner of a resource (memory, file handle, connection, thread, lock, …) if it is responsible for its lifetime (initialization&#x2F;creation, finalization&#x2F;destruction).</p><p>non-owning: <code>std::span</code> <code>std::string_view</code></p><h2 id="std-span-C-20"><a href="#std-span-C-20" class="headerlink" title="std::span C++20"></a><code>std::span</code> <code>C++20</code></h2><p><a href="https://hackingcpp.com/cpp/std/span.html">hacking C++</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// C-style</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-type">int</span>* nums, <span class="hljs-type">int</span> n)</span></span>;<br><br><span class="hljs-comment">// C++20</span><br><span class="hljs-meta"># <span class="hljs-keyword">include</span> <span class="hljs-string">&lt;span&gt;</span></span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">foo</span><span class="hljs-params">(std::span&lt;<span class="hljs-type">int</span>&gt; nums_span)</span></span>;<br></code></pre></td></tr></table></figure><p><code>std::span</code>可以使用STL接口：<code>empty</code>, <code>size</code>, <code>for</code>, <code>begin</code>, <code>end</code>…</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;span&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_ints</span> <span class="hljs-params">(std::span&lt;<span class="hljs-type">int</span> <span class="hljs-type">const</span>&gt; s)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : s) std::cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>std::cout &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>&#125;<br><br><span class="hljs-comment">// we are going to pretend that this is some memory </span><br><span class="hljs-comment">// that is managed by an external library</span><br>std::vector&lt;<span class="hljs-type">int</span>&gt; v &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;;<br><span class="hljs-comment">// and that these are functions from such a library</span><br><span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">get_number_of_elements</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> v.<span class="hljs-built_in">size</span>(); &#125;<br><span class="hljs-function"><span class="hljs-type">int</span>*   <span class="hljs-title">get_pointer_to_memory</span><span class="hljs-params">()</span>  </span>&#123; <span class="hljs-keyword">return</span> v.<span class="hljs-built_in">data</span>(); &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// e.g. access to a C library&#x27;s memory</span><br>    <span class="hljs-type">size_t</span> n = <span class="hljs-built_in">get_number_of_elements</span>();<br>    <span class="hljs-type">int</span>*   p = <span class="hljs-built_in">get_pointer_to_memory</span>();<br>    <span class="hljs-built_in">print_ints</span>( &#123;p, n&#125; );  <br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>类比Golang中的slice和array</p></blockquote><h2 id="std-string-view-C-17"><a href="#std-string-view-C-17" class="headerlink" title="std::string_view C++17"></a><code>std::string_view</code> <code>C++17</code></h2><p><a href="https://stackoverflow.com/questions/20803826/what-is-string-view">What is string_view?</a></p><p>non-owning</p><p>类似<strong>string&#x2F;array reference</strong>的概念都是为了<strong>避免数据拷贝</strong>，其实现通常包含两个部分：「指向首个元素的指针 &amp; 数据的长度」。view视图可以实现cheap的值传递和指针++、size调整等操作。</p><p>string的使用大多都不需要对字符串的实际owning（并且通常该string已经有其他所有者），所以我们需要尽可能避免不必要的副本。</p><p>C-style string的终止标识是<code>\0</code>，故创建子串意味着修改底层字符串</p><p><code>std::string_view</code>的效率高于<code>const std::string&amp;</code>：</p><p><code>std::string</code>可以由string字面量或者<code>char</code>序列构造，一旦我们将这二者作为实参传入类似<code>const std::string&amp;</code>形参格式的函数中，便会产生一个临时的string对象并绑定到该常量引用上。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string_view&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f_cref</span> <span class="hljs-params">(std::string <span class="hljs-type">const</span>&amp; s)</span> </span>&#123; … &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f_view</span> <span class="hljs-params">(std::string_view s)</span> </span>&#123; … &#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span> <span class="hljs-params">()</span> </span>&#123;<br>  std::string stdStr = <span class="hljs-string">&quot;Standard String&quot;</span>;<br>  <span class="hljs-keyword">auto</span> <span class="hljs-type">const</span> cStr = <span class="hljs-string">&quot;C-String&quot;</span>;<br>  std::vector&lt;<span class="hljs-type">char</span>&gt; v &#123;<span class="hljs-string">&#x27;c&#x27;</span>,<span class="hljs-string">&#x27;h&#x27;</span>,<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>,<span class="hljs-string">&#x27;s&#x27;</span>,<span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br>    <br>  <span class="hljs-built_in">f_cref</span>(stdStr);       <span class="hljs-comment">// no copy</span><br>  <span class="hljs-built_in">f_cref</span>(cStr);         <span class="hljs-comment">// 🙁temp copy</span><br>  <span class="hljs-built_in">f_cref</span>(<span class="hljs-string">&quot;Literal&quot;</span>);    <span class="hljs-comment">// 🙁temp copy</span><br>  <span class="hljs-built_in">f_cref</span>(&#123;<span class="hljs-built_in">begin</span>(v),<span class="hljs-built_in">end</span>(v)&#125;);  <span class="hljs-comment">// 🙁temp copy</span><br>  <br>  <span class="hljs-built_in">f_view</span>(stdStr);       <span class="hljs-comment">// no copy</span><br>  <span class="hljs-built_in">f_view</span>(cStr);         <span class="hljs-comment">// no copy</span><br>  <span class="hljs-built_in">f_view</span>(<span class="hljs-string">&quot;Literal&quot;</span>);          <span class="hljs-comment">// no copy</span><br>  <span class="hljs-built_in">f_view</span>(&#123;<span class="hljs-built_in">begin</span>(v),<span class="hljs-built_in">end</span>(v)&#125;);  <span class="hljs-comment">// no copy</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>编程杂记</title>
    <link href="/2023/09/06/%E7%BC%96%E7%A8%8B%E6%9D%82%E8%AE%B0/"/>
    <url>/2023/09/06/%E7%BC%96%E7%A8%8B%E6%9D%82%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h3 id="Unix-timestamp"><a href="#Unix-timestamp" class="headerlink" title="Unix timestamp"></a>Unix timestamp</h3><p>Unix 时间戳（Unix timestamp）是一种表示时间的方式，它是一个整数，表示自 <strong>1970 年 1 月 1 日 00:00:00</strong>（<u>UTC</u>，协调世界时）以来的秒数。Unix 时间戳通常用于计算机系统中，特别是在Unix、Linux和类似系统中，用于记录和处理时间。它是一种跨平台的时间表示方法，因为它不受时区和夏令时的影响。</p><p>Unix操作系统是由肯·汤普逊（Ken Thompson）、丹尼斯·里奇（Dennis Ritchie）等人在20世纪70年代早期开发的。当时，他们需要一种在不同计算机系统之间传递时间信息的标准方法。为了简化时间表示，并且因为1970年正好是Unix系统首次运行的时间，他们选择了这个时间点作为起始点。这个时间点被称为<strong>Unix纪元</strong>（Unix Epoch），是Unix和类Unix操作系统中广泛使用的时间表示方法的基础。</p><p>协调世界时（Coordinated Universal Time，缩写为<strong>UTC</strong>）是一种国际标准的时间计量系统，旨在提供一种统一的时间表示，不受地理位置或政治因素的影响。UTC 是世界上广泛接受的时间标准之一，用于协调全球的时间。</p><h3 id="字节序-endian"><a href="#字节序-endian" class="headerlink" title="字节序 endian"></a>字节序 endian</h3><p>计算机硬件有两种存储数据的方式，以<code>0x2211</code> 为例</p><ul><li>大端字节序（big endian）：高位字节在前，低位字节在后，符合人类直觉的方法，即<code>0x22</code> <code>0x11</code></li><li>小端字节序（little endian）：低位字节在前，高位字节在后 <code>0x11</code> <code>0x22</code></li></ul><blockquote><p>每个16进制位对应<strong>4个</strong>2进制位</p></blockquote><p>计算器先处理低位字节效率更高，通常计算机内部使用小端字节序，而网络传输、文件存储通常使用大端字节序。只有<strong>读取</strong>的时候，才必须区分字节序，其他情况都不用考虑（如<strong>写入</strong>）。</p><p>对于一个16位整数，大端字节序的处理伪代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x = buf[offset]&lt;&lt;<span class="hljs-number">8</span> | buf[offset+<span class="hljs-number">1</span>]<br></code></pre></td></tr></table></figure><p>小端字节序的处理伪代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">x = buf[offset+<span class="hljs-number">1</span>]&lt;&lt;<span class="hljs-number">8</span> | buf[offset]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C++环境配置</title>
    <link href="/2023/08/18/C-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/"/>
    <url>/2023/08/18/C-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE/</url>
    
    <content type="html"><![CDATA[<h2 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h2><p>开发环境：VSCode</p><p>编译：XMake</p><p>语法提示&#x2F;补全：Clangd</p><p>调试：CodeLLDB</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Chapter II 语言可用性的强化</title>
    <link href="/2023/08/17/Chapter-II-%E8%AF%AD%E8%A8%80%E5%8F%AF%E7%94%A8%E6%80%A7%E7%9A%84%E5%BC%BA%E5%8C%96/"/>
    <url>/2023/08/17/Chapter-II-%E8%AF%AD%E8%A8%80%E5%8F%AF%E7%94%A8%E6%80%A7%E7%9A%84%E5%BC%BA%E5%8C%96/</url>
    
    <content type="html"><![CDATA[<h2 id="2-1-常量"><a href="#2-1-常量" class="headerlink" title="2.1 常量"></a>2.1 常量</h2><h3 id="nullptr"><a href="#nullptr" class="headerlink" title="nullptr"></a>nullptr</h3><p>C++11引入了<code>nullptr</code>关键字，其类型为<code>nullptr_t</code>，专门用来区分「空指针 &amp; 0」。<code>nullptr</code>能够隐式转换为任何指针，也能够进行是否相等的比较。</p><h3 id="constexpr"><a href="#constexpr" class="headerlink" title="constexpr"></a>constexpr</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">constexpr</span> <span class="hljs-type">int</span> <span class="hljs-title">fibonacci</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> n == <span class="hljs-number">1</span> || n == <span class="hljs-number">2</span> ? <span class="hljs-number">1</span> : <span class="hljs-built_in">fibonacci</span>(n<span class="hljs-number">-2</span>) + <span class="hljs-built_in">fibonacci</span>(n<span class="hljs-number">-1</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test</title>
    <link href="/2023/08/17/test/"/>
    <url>/2023/08/17/test/</url>
    
    <content type="html"><![CDATA[<p>以后就在这里记录啦</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/08/17/hello-world/"/>
    <url>/2023/08/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
